// <auto-generated />
using System;
using Cafezinho.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cafezinho.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230615010836_CreateDb")]
    partial class CreateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cafezinho.Models.Ativo", b =>
                {
                    b.Property<string>("Ticker")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ticker");

                    b.Property<int?>("DashboardId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nome");

                    b.HasKey("Ticker");

                    b.HasIndex("DashboardId");

                    b.ToTable("Ativos");
                });

            modelBuilder.Entity("Cafezinho.Models.Cliente", b =>
                {
                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("cpf");

                    b.Property<string>("Bairro")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cidade");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DtNascimento")
                        .HasColumnType("datetime2")
                        .HasColumnName("dt_nascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("estado");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("logradouro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nome");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("numero");

                    b.Property<int>("Perfil")
                        .HasColumnType("int")
                        .HasColumnName("perfil");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("senha");

                    b.HasKey("Cpf");

                    b.ToTable("clientes");

                    b.HasData(
                        new
                        {
                            Cpf = "001",
                            Bairro = "",
                            Cep = "",
                            Cidade = "",
                            Complemento = "",
                            DtNascimento = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "",
                            Estado = "",
                            Logradouro = "",
                            Nome = "Admin",
                            Numero = "",
                            Perfil = 1,
                            Senha = "$2a$10$6z4B.MIAncvz0rsrTRnuDORmDZUXXa1hXAXs9Pfa7Twwjylz2qujS"
                        });
                });

            modelBuilder.Entity("Cafezinho.Models.Dashboard", b =>
                {
                    b.Property<int>("DashboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DashboardId"));

                    b.Property<int>("TotalEmCarteira")
                        .HasColumnType("int");

                    b.HasKey("DashboardId");

                    b.ToTable("Dashboard");
                });

            modelBuilder.Entity("Cafezinho.Models.Registro", b =>
                {
                    b.Property<int>("RegistroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("registro_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistroId"));

                    b.Property<string>("ClienteId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("cliente_id");

                    b.Property<int?>("DashboardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DtTransacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_transacao");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("preco");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<string>("Ticker")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ticker");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("valor_total");

                    b.HasKey("RegistroId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("DashboardId");

                    b.HasIndex("Ticker");

                    b.ToTable("Registros");
                });

            modelBuilder.Entity("Cafezinho.Models.Venda", b =>
                {
                    b.Property<int>("VendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("venda_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendaId"));

                    b.Property<DateTime>("DtTransacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_transacao");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("preco");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<int>("RegistroId")
                        .HasColumnType("int")
                        .HasColumnName("registro_id");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("valor_total");

                    b.HasKey("VendaId");

                    b.HasIndex("RegistroId");

                    b.ToTable("Vendas");
                });

            modelBuilder.Entity("Cafezinho.Models.Ativo", b =>
                {
                    b.HasOne("Cafezinho.Models.Dashboard", null)
                        .WithMany("ativos")
                        .HasForeignKey("DashboardId");
                });

            modelBuilder.Entity("Cafezinho.Models.Registro", b =>
                {
                    b.HasOne("Cafezinho.Models.Cliente", "Cliente")
                        .WithMany("Registros")
                        .HasForeignKey("ClienteId");

                    b.HasOne("Cafezinho.Models.Dashboard", null)
                        .WithMany("Registros")
                        .HasForeignKey("DashboardId");

                    b.HasOne("Cafezinho.Models.Ativo", "Ativo")
                        .WithMany()
                        .HasForeignKey("Ticker");

                    b.Navigation("Ativo");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Cafezinho.Models.Venda", b =>
                {
                    b.HasOne("Cafezinho.Models.Registro", "Registro")
                        .WithMany()
                        .HasForeignKey("RegistroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registro");
                });

            modelBuilder.Entity("Cafezinho.Models.Cliente", b =>
                {
                    b.Navigation("Registros");
                });

            modelBuilder.Entity("Cafezinho.Models.Dashboard", b =>
                {
                    b.Navigation("Registros");

                    b.Navigation("ativos");
                });
#pragma warning restore 612, 618
        }
    }
}
